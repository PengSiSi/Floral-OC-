//
//  SelectPhotoViewController.m
//  QianfengSchool
//
//  Created by AlicePan on 16/8/10.
//  Copyright © 2016年 Combanc. All rights reserved.
//

#import "SelectPhotoViewController.h"
#import "WSelectPhoto.h"
#import <CommonCrypto/CommonDigest.h>

@interface SelectPhotoViewController ()<UIActionSheetDelegate,UIImagePickerControllerDelegate,UINavigationControllerDelegate>

@end

@implementation SelectPhotoViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    //默认是9张
    _selectPhotoMaxCount = 9;
    // Do any additional setup after loading the view.
}

static SelectPhotoViewController *manager = nil;
+ (SelectPhotoViewController *)sharedInstance {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [[SelectPhotoViewController alloc] init];
    });
    return manager;
}

- (NSMutableArray *)mutArr {
    
    if (!_mutArr) {
        _mutArr = [[NSMutableArray alloc]init];
    }
    return _mutArr;
}

- (NSMutableArray *)imageNameArray {
    
    if (!_imageNameArray) {
        _imageNameArray = [[NSMutableArray alloc]init];
    }
    return _imageNameArray;
}

- (NSMutableArray *)imageSizeArray {
    
    if (!_imageSizeArray) {
        _imageSizeArray = [[NSMutableArray alloc]init];
    }
    return _imageSizeArray;
}

- (NSMutableArray *)imageUsernameArray {
    
    if (!_imageUsernameArray) {
        _imageUsernameArray = [[NSMutableArray alloc]init];
    }
    return _imageUsernameArray;
}


- (void)selectPhotoAction {
    UIActionSheet *actionSheet = [[UIActionSheet alloc]initWithTitle:@"请选择照片来源" delegate:self
                                                   cancelButtonTitle:@"取消"
                                              destructiveButtonTitle:nil
                                                   otherButtonTitles:@"拍照", @"相册选取",nil];
    actionSheet.actionSheetStyle = UIActionSheetStyleBlackOpaque;
    [actionSheet showInView:self.view];
}

#pragma mark -UIActionSheet代理方法
-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (buttonIndex == 0) {
        [self takePhoto];
    }
    else if (buttonIndex == 1) {
        [self addPhoto];
    }
}

#pragma mark - 拍照方法
- (void)takePhoto {
    UIImagePickerControllerSourceType sourceType = UIImagePickerControllerSourceTypeCamera;
    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
    picker.delegate = self;
    picker.allowsEditing = YES;
    picker.sourceType = sourceType;
    if (_presentBlock) {
        _presentBlock(picker);
    }
}

- (void)addPhoto {
    WSelectPhotoPickerViewController *pickerVc = [[WSelectPhotoPickerViewController alloc] init];
    //跳转到相册界面
    if (_presentBlock) {
        _presentBlock(pickerVc);
    }
    // 默认显示相册里面的内容SavePhotos
    pickerVc.status = PickerViewShowStatusCameraRoll;
    // 选择图片的最小数，默认是9张图片
    pickerVc.minCount = _selectPhotoMaxCount;
    
    __weak __typeof(self)weakSelf = self;
    pickerVc.callBack = ^(NSArray *assets){
        
        for (WSelectPhotoAssets *ass in assets) {
            //选中的图片大于九张就直接返回
            if (_mutArr.count > 8) {
                break;
            }
            if (_isCompressImage) {
                [weakSelf.mutArr addObject:[self compressImage:ass.originImage]];
            } else {
                [weakSelf.mutArr addObject:UIImagePNGRepresentation(ass.originImage)];
            }
            [weakSelf.imageNameArray addObject:ass.fileName];
            [weakSelf.imageSizeArray addObject:[NSString stringWithFormat:@"%f",ass.fileSize]];
            [weakSelf.imageUsernameArray addObject:[self getPhotoName]];
        }
        if (weakSelf.selectImageBlock) {
            weakSelf.selectImageBlock(weakSelf.mutArr,weakSelf.imageNameArray,weakSelf.imageSizeArray,weakSelf.imageUsernameArray);
        }
        if (weakSelf.dismissBlock) {
            weakSelf.dismissBlock(nil);
        }
    };
    pickerVc = nil;
}

#pragma mark - 拍照方法
-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
//    NSLog(@"拍照info----%@",info);
    //获取image
    UIImage *selectImage=[info objectForKey:UIImagePickerControllerOriginalImage];
    selectImage = [self fixOrientation:selectImage];
    //压缩图片
    NSData *imageData;
    if (_isCompressImage) {
        imageData = [self compressImage:selectImage];
    } else {
        imageData = UIImagePNGRepresentation(selectImage);
    }
    NSInteger length = [imageData length]/1024; //kb

    [self.mutArr addObject:imageData];
    [self.imageNameArray addObject:[self getPhotoName]];
    [self.imageUsernameArray addObject:[self getPhotoName]];
    [self.imageSizeArray addObject:[NSString stringWithFormat:@"%ld",(long)length]];
    //改变photo所在的view以及显示选择的照片
//    [self dismissViewControllerAnimated:YES completion:nil];
    if (_selectImageBlock) {
        self.selectImageBlock(self.mutArr,self.imageNameArray,self.imageSizeArray,self.imageUsernameArray);
    }
    if (_dismissBlock) {
        _dismissBlock(nil);
    }
}

-(void)imagePickerControllerDizdCancel:(UIImagePickerController *)picker {
    if (_dismissBlock) {
        _dismissBlock(nil);
    }
}

//以时间戳去命名拍照图片的名字
- (NSString *)getPhotoName {
    NSDate* dat = [NSDate dateWithTimeIntervalSinceNow:0];
    NSTimeInterval a=[dat timeIntervalSince1970] * 1000;  //  *1000 是精确到毫秒，不乘就是精确到秒
    NSString *timeString = [NSString stringWithFormat:@"%f", a]; //转为字符型
    NSString *phName = [self md5:timeString];
    phName = [NSString stringWithFormat:@"%@.png",phName];
    return phName;
}

-(NSString *) md5: (NSString *) inPutText {
    
    const char *cStr = [inPutText UTF8String];
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5(cStr, strlen(cStr), result);
    
    return [[NSString stringWithFormat:@"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
             result[0], result[1], result[2], result[3],
             result[4], result[5], result[6], result[7],
             result[8], result[9], result[10], result[11],
             result[12], result[13], result[14], result[15]
             ] lowercaseString];
}

#pragma mark - 界面跳转的回调
- (void)VCPresentWithBlock:(presentBlock)block {
    if (!_isKeepLastImage) {
        if (_mutArr.count > 0) {
            [_mutArr removeAllObjects];
        }
        if (_imageNameArray.count > 0) {
            [_imageNameArray removeAllObjects];
        }
        if (_imageSizeArray.count > 0) {
            [_imageSizeArray removeAllObjects];
        }
        if (_imageUsernameArray.count > 0) {
            [_imageUsernameArray removeAllObjects];
        }
    }
    _presentBlock = block;
    
}
- (void)VCDismissWithBlock:(dismissBlock)block {

    _dismissBlock = block;
}
- (void)selectImageWithBlock:(selectImageBlock)block {
    _selectImageBlock = block;
}

#pragma mark - 旋转90度
- (UIImage *)fixOrientation:(UIImage *)aImage {
    
    // No-op if the orientation is already correct
    if (aImage.imageOrientation == UIImageOrientationUp)
        return aImage;
    
    // We need to calculate the proper transformation to make the image upright.
    // We do it in 2 steps: Rotate if Left/Right/Down, and then flip if Mirrored.
    CGAffineTransform transform = CGAffineTransformIdentity;
    
    switch (aImage.imageOrientation) {
        case UIImageOrientationDown:
        case UIImageOrientationDownMirrored:
            transform = CGAffineTransformTranslate(transform, aImage.size.width, aImage.size.height);
            transform = CGAffineTransformRotate(transform, M_PI);
            break;
            
        case UIImageOrientationLeft:
        case UIImageOrientationLeftMirrored:
            transform = CGAffineTransformTranslate(transform, aImage.size.width, 0);
            transform = CGAffineTransformRotate(transform, M_PI_2);
            break;
            
        case UIImageOrientationRight:
        case UIImageOrientationRightMirrored:
            transform = CGAffineTransformTranslate(transform, 0, aImage.size.height);
            transform = CGAffineTransformRotate(transform, -M_PI_2);
            break;
        default:
            break;
    }
    
    switch (aImage.imageOrientation) {
        case UIImageOrientationUpMirrored:
        case UIImageOrientationDownMirrored:
            transform = CGAffineTransformTranslate(transform, aImage.size.width, 0);
            transform = CGAffineTransformScale(transform, -1, 1);
            break;
            
        case UIImageOrientationLeftMirrored:
        case UIImageOrientationRightMirrored:
            transform = CGAffineTransformTranslate(transform, aImage.size.height, 0);
            transform = CGAffineTransformScale(transform, -1, 1);
            break;
        default:
            break;
    }
    
    // Now we draw the underlying CGImage into a new context, applying the transform
    // calculated above.
    CGContextRef ctx = CGBitmapContextCreate(NULL, aImage.size.width, aImage.size.height,
                                             CGImageGetBitsPerComponent(aImage.CGImage), 0,
                                             CGImageGetColorSpace(aImage.CGImage),
                                             CGImageGetBitmapInfo(aImage.CGImage));
    CGContextConcatCTM(ctx, transform);
    switch (aImage.imageOrientation) {
        case UIImageOrientationLeft:
        case UIImageOrientationLeftMirrored:
        case UIImageOrientationRight:
        case UIImageOrientationRightMirrored:
            // Grr...
            CGContextDrawImage(ctx, CGRectMake(0,0,aImage.size.height,aImage.size.width), aImage.CGImage);
            break;
            
        default:
            CGContextDrawImage(ctx, CGRectMake(0,0,aImage.size.width,aImage.size.height), aImage.CGImage);
            break;
    }
    
    // And now we just create a new UIImage from the drawing context
    CGImageRef cgimg = CGBitmapContextCreateImage(ctx);
    UIImage *img = [UIImage imageWithCGImage:cgimg];
    CGContextRelease(ctx);
    CGImageRelease(cgimg);
    return img;
}

#pragma mark - set方法
- (void)setSelectPhotoMaxCount:(NSInteger)selectPhotoMaxCount {
    _selectPhotoMaxCount = selectPhotoMaxCount;
}

- (void)setIsKeepLastImage:(BOOL)isKeepLastImage {
    _isKeepLastImage = isKeepLastImage;
}

- (void)setIsCompressImage:(BOOL)isCompressImage {
    _isCompressImage = isCompressImage;
}

#pragma mark - 压缩图片
- (NSData *)compressImage:(UIImage *)image {
    NSUInteger maxFileSize = FILE_MAXSIZE;
    NSData *originImageData = UIImagePNGRepresentation(image);
    NSInteger length = [originImageData length]/1024;
    if (length < maxFileSize) {
        return originImageData;
    } else {
        CGFloat compressionRatio = 0.7f;
        CGFloat maxCompressionRatio = 0.1f;
        NSData *imageData = UIImageJPEGRepresentation(image, compressionRatio);
        
        while (imageData.length > maxFileSize && compressionRatio > maxCompressionRatio) {
            compressionRatio -= 0.1f;
            imageData = UIImageJPEGRepresentation(image, compressionRatio);
        }
        return imageData;
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
